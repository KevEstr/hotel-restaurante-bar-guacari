{"ast":null,"code":"import axios from \"axios\";\nimport { TABLE_LIST_REQUEST, TABLE_LIST_SUCCESS, TABLE_LIST_FAIL, TABLE_CREATE_REQUEST, TABLE_CREATE_SUCCESS, TABLE_CREATE_FAIL, TABLE_DETAILS_REQUEST, TABLE_DETAILS_SUCCESS, TABLE_DETAILS_FAIL, TABLE_UPDATE_REQUEST, TABLE_UPDATE_SUCCESS, TABLE_UPDATE_FAIL, TABLE_DELETE_REQUEST, TABLE_DELETE_SUCCESS, TABLE_DELETE_FAIL, TABLE_ALL_REQUEST, TABLE_ALL_SUCCESS, TABLE_ALL_FAIL } from \"../constants/tableConstants\";\n\n//get all tables\nexport const allTables = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: TABLE_ALL_REQUEST\n    });\n\n    //get user from state\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n\n    //headers\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n\n    //if tables available is needed\n    const {\n      data\n    } = await axios.get(`/api/tables/all`, config);\n    dispatch({\n      type: TABLE_ALL_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: TABLE_ALL_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n//get all tables with pagination\nexport const listTables = (keyword = \"\", pageNumber = \"\") => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: TABLE_LIST_REQUEST\n    });\n\n    //get user from state\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n\n    //headers\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n\n    //get all tables\n    const {\n      data\n    } = await axios.get(`/api/tables?keyword=${keyword}&pageNumber=${pageNumber}`, config);\n    dispatch({\n      type: TABLE_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: TABLE_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n//create a table\nexport const createTable = table => async (dispatch, getState) => {\n  const {\n    name\n  } = table;\n  try {\n    dispatch({\n      type: TABLE_CREATE_REQUEST\n    });\n\n    //get table from state\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n\n    //headers\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n\n    //create table\n    const {\n      data\n    } = await axios.post(\"/api/tables\", {\n      name\n    }, config);\n    dispatch({\n      type: TABLE_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: TABLE_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n//get table details\nexport const listTableDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: TABLE_DETAILS_REQUEST\n    });\n\n    //get user from state\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n\n    //headers\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n\n    //api call to get table\n    const {\n      data\n    } = await axios.get(`/api/tables/${id}`, config);\n    dispatch({\n      type: TABLE_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: TABLE_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n//update a table\nexport const updateTable = table => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: TABLE_UPDATE_REQUEST\n    });\n\n    //get user from state\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    //headers\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n\n    //update table\n    const {\n      data\n    } = await axios.put(`/api/tables/${table.id}`, table, config);\n    dispatch({\n      type: TABLE_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: TABLE_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n//delete table\nexport const deleteTable = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: TABLE_DELETE_REQUEST\n    });\n\n    //get user from state\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    //headers\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n\n    //api call to delete table\n    await axios.delete(`/api/tables/${id}`, config);\n    dispatch({\n      type: TABLE_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: TABLE_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","TABLE_LIST_REQUEST","TABLE_LIST_SUCCESS","TABLE_LIST_FAIL","TABLE_CREATE_REQUEST","TABLE_CREATE_SUCCESS","TABLE_CREATE_FAIL","TABLE_DETAILS_REQUEST","TABLE_DETAILS_SUCCESS","TABLE_DETAILS_FAIL","TABLE_UPDATE_REQUEST","TABLE_UPDATE_SUCCESS","TABLE_UPDATE_FAIL","TABLE_DELETE_REQUEST","TABLE_DELETE_SUCCESS","TABLE_DELETE_FAIL","TABLE_ALL_REQUEST","TABLE_ALL_SUCCESS","TABLE_ALL_FAIL","allTables","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","get","payload","error","response","message","listTables","keyword","pageNumber","createTable","table","name","post","listTableDetails","id","updateTable","put","deleteTable","delete"],"sources":["C:/Users/ASUS/Desktop/restobar-master/restobar-master/frontend/src/actions/tableActions.js"],"sourcesContent":["import axios from \"axios\";\nimport {\n    TABLE_LIST_REQUEST,\n    TABLE_LIST_SUCCESS,\n    TABLE_LIST_FAIL,\n    TABLE_CREATE_REQUEST,\n    TABLE_CREATE_SUCCESS,\n    TABLE_CREATE_FAIL,\n    TABLE_DETAILS_REQUEST,\n    TABLE_DETAILS_SUCCESS,\n    TABLE_DETAILS_FAIL,\n    TABLE_UPDATE_REQUEST,\n    TABLE_UPDATE_SUCCESS,\n    TABLE_UPDATE_FAIL,\n    TABLE_DELETE_REQUEST,\n    TABLE_DELETE_SUCCESS,\n    TABLE_DELETE_FAIL,\n    TABLE_ALL_REQUEST,\n    TABLE_ALL_SUCCESS,\n    TABLE_ALL_FAIL,\n} from \"../constants/tableConstants\";\n\n//get all tables\nexport const allTables = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: TABLE_ALL_REQUEST,\n        });\n\n        //get user from state\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        //headers\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        //if tables available is needed\n        const { data } = await axios.get(`/api/tables/all`, config);\n\n        dispatch({\n            type: TABLE_ALL_SUCCESS,\n            payload: data,\n        });\n    } catch (error) {\n        dispatch({\n            type: TABLE_ALL_FAIL,\n            payload:\n                error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message,\n        });\n    }\n};\n\n//get all tables with pagination\nexport const listTables = (keyword = \"\", pageNumber = \"\") => async (\n    dispatch,\n    getState\n) => {\n    try {\n        dispatch({\n            type: TABLE_LIST_REQUEST,\n        });\n\n        //get user from state\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        //headers\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        //get all tables\n        const { data } = await axios.get(\n            `/api/tables?keyword=${keyword}&pageNumber=${pageNumber}`,\n            config\n        );\n\n        dispatch({\n            type: TABLE_LIST_SUCCESS,\n            payload: data,\n        });\n    } catch (error) {\n        dispatch({\n            type: TABLE_LIST_FAIL,\n            payload:\n                error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message,\n        });\n    }\n};\n\n//create a table\nexport const createTable = (table) => async (dispatch, getState) => {\n    const { name } = table;\n\n    try {\n        dispatch({\n            type: TABLE_CREATE_REQUEST,\n        });\n\n        //get table from state\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        //headers\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        //create table\n        const { data } = await axios.post(\"/api/tables\", { name }, config);\n        dispatch({\n            type: TABLE_CREATE_SUCCESS,\n            payload: data,\n        });\n    } catch (error) {\n        dispatch({\n            type: TABLE_CREATE_FAIL,\n            payload:\n                error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message,\n        });\n    }\n};\n\n//get table details\nexport const listTableDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({ type: TABLE_DETAILS_REQUEST });\n\n        //get user from state\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        //headers\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        //api call to get table\n        const { data } = await axios.get(`/api/tables/${id}`, config);\n        dispatch({\n            type: TABLE_DETAILS_SUCCESS,\n            payload: data,\n        });\n    } catch (error) {\n        dispatch({\n            type: TABLE_DETAILS_FAIL,\n            payload:\n                error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message,\n        });\n    }\n};\n\n//update a table\nexport const updateTable = (table) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: TABLE_UPDATE_REQUEST,\n        });\n\n        //get user from state\n        const {\n            userLogin: { userInfo },\n        } = getState();\n        //headers\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        //update table\n        const { data } = await axios.put(\n            `/api/tables/${table.id}`,\n            table,\n            config\n        );\n        dispatch({\n            type: TABLE_UPDATE_SUCCESS,\n            payload: data,\n        });\n    } catch (error) {\n        dispatch({\n            type: TABLE_UPDATE_FAIL,\n            payload:\n                error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message,\n        });\n    }\n};\n\n//delete table\nexport const deleteTable = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: TABLE_DELETE_REQUEST,\n        });\n\n        //get user from state\n        const {\n            userLogin: { userInfo },\n        } = getState();\n        //headers\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        //api call to delete table\n        await axios.delete(`/api/tables/${id}`, config);\n        dispatch({\n            type: TABLE_DELETE_SUCCESS,\n        });\n    } catch (error) {\n        dispatch({\n            type: TABLE_DELETE_FAIL,\n            payload:\n                error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message,\n        });\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}